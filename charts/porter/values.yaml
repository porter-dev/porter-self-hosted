# Default values for porter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  repository: porter1/porter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.32.6"
server:
  # initInCluster should be set to `true` if you want a default project created on the Porter instance
  # to automatically connect to the k8s cluster that the Porter instance is running in.
  initInCluster: true
  port: 8080

  # Extra environment variables to pass to the server (if not supported in other blocks)
  env:
    normal:
    synced:

  # setAdminRBAC allows the Porter dashboard system:masters access to the cluster, otherwise a separate clusterrole
  # is created for the Porter user.
  setAdminRBAC: false
  postgres: {}
  # if bringing your own postgres:
  # port: 5432
  # host: my-host
  # name: porter
  # user: porter
  # password: porter
  cookieSecret: "random_hash_key_;random_block_key"
  dbEncryptionKey: "__random_strong_encryption_key__"

  sslCertificateName: porter-cert-tls

  # if key rotation is necessary
  # oldDBEncryptionKey: "__random_strong_encryption_key__"
  # newDBEncryptionKey: "__random_strong_encryption_key__"
  tokenEncryptionKey: "secret"
  url: http://localhost:8080
  additionalEnv: {}
  # COOKIE_INSECURE: true
  # ADMIN_EMAIL: test@example.com

  # INTEGRATIONS:
  basicLogin:
    enabled: true
  slack:
    enabled: false
    # clientId: slack-client-id
    # clientSecret: slack-client-secret
  githubLogin:
    enabled: false
    # clientId: github-client-id
    # clientSecret: github-client-secret
  googleLogin:
    enabled: false
    # clientId: google-client-id
    # clientSecret: google-client-secret
    # restrictedDomain: google-restricted-domain
  githubApp:
    enabled: false
    # clientId: github-app-client-id
    # clientSecret: github-app-client-secret
    # webhookSecret: github-app-webhook-secret
    # name: github-app-name
    # id: github-app-id
    # privateKey: github_app_private_key.pem

    # If the Github app's private key is stored in a separate secret, it can be referenced
    # through privateKeySecretName. The secret must contain the key "github_app_private_key.pem"
    # privateKeySecretName: custom-secret-name

  gitlab:
    enabled: false
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80
ingress:
  enabled: false
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: [""]
  tls:
    # secret name must be porter-cert-tls
  #  - secretName: porter-cert-tls
  #  hosts:
  #    - chart-example.local

privateIngress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: [""]
  tls:
  # secret name must be porter-cert-tls
  #  - secretName: porter-cert-tls
  #  hosts:
  #    - chart-example.local

resources:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 512Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}

provisioner:
  enabled: false
  port: 8080

  # Extra environment variables to pass to the provisioner (if not supported in other blocks)
  env:
    normal:
    synced:

  staticAuthToken: "secret"
  service:
    type: ClusterIP
    port: 8080
  image:
    repository: public.ecr.aws/o1j4x7p4/provisioner-service
    tag: "v0.26.7"
  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 512Mi
  provisionerJob:
    imageRepo: 313504253455.dkr.ecr.us-east-2.amazonaws.com/provisioner
    imageTag: latest
  s3:
    # existingSecretName: s3-credentials-secret
    # existingSecretRefs:
    #   encryptionKey: "__random_strong_encryption_key__"
    #   bucketName: TODO
    #   region: TODO
    #   accessKeyID: TODO
    #   secretAccessKey: TODO
    encryptionKey: "__random_strong_encryption_key__"
    bucketName: TODO
    region: TODO
    accessKeyID: TODO
    secretAccessKey: TODO
  imagePullSecrets: []
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

postgresql:
  enabled: true
  ssl_enabled: false
  postgresqlDatabase: porter
  postgresqlUsername: porter
  postgresqlPassword: porter
  service:
    port: 5432
  image:
    # see https://www.postgresql.org/support/versioning/
    tag: "11.12.0"
  postgresqlDataDir: "/data/pgdata"
  persistence:
    enabled: true
    mountPath: "/data/"

redis:
  usePassword: true
  password: redispassword

workerPool:
  enabled: false
  port: 3000

  schedule: 0 * * * *

  image:
    repository: public.ecr.aws/o1j4x7p4/worker-pool
    pullPolicy: IfNotPresent
    tag: "v0.33.0"

  env:
    normal:
    synced:

  service:
    type: ClusterIP
    port: 3000

  resources:
    limits:
      cpu: 200m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 512Mi

  imagePullSecrets: []
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
